#!/usr/bin/env zsh
# Turn on command tracking We eventually move this to debug option 
set -x
# Require root or sudo
if [[ "$EUID" -ne 0 ]]; then
  echo "Error: This command must be run as root or with sudo." >&2
  exit 1
fi


SPELL_NAME="$1"
SOURCE_GRIMOIRE="$2"

DEFAULTS_FILE="$HOME/.neosorcery/spell.defaults"
VERSIONS_FILE="$HOME/.neosorcery/spell.versions"

mkdir -p "$(dirname "$DEFAULTS_FILE")"
touch "$DEFAULTS_FILE" "$VERSIONS_FILE"

# Help
if [[ "$SPELL_NAME" == "-h" || "$SPELL_NAME" == "--help" || "$SPELL_NAME" == "help" ]]; then
  echo "Usage: cast_internal <spell> [source]"
  echo ""
  echo "Options:"
  echo "  source   Optional: user/global or a full grimoire path"
  echo "  -h       Show this help message"
  exit 0
fi

if [[ -z "$SPELL_NAME" ]]; then
  echo "Error: No spell name provided." >&2
  exit 1
fi
# High-level start message
echo "=== [cast_internal] Casting spell: $SPELL_NAME ==="
# Gather grimoire layers
LAYERS=()
[[ -d "$HOME/.neosorcery/grimoire" ]] && LAYERS+=("$HOME/.neosorcery/grimoire")
[[ -d "/etc/neosorcery/grimoire" ]] && LAYERS+=("/etc/neosorcery/grimoire")

# Find spell
FOUND_PATHS=()
if [[ -n "$SOURCE_GRIMOIRE" ]]; then
  if [[ "$SOURCE_GRIMOIRE" == "user" ]]; then
    SPELL_DIR="$HOME/.neosorcery/grimoire/$SPELL_NAME"
  elif [[ "$SOURCE_GRIMOIRE" == "global" ]]; then
    SPELL_DIR="/etc/neosorcery/grimoire/$SPELL_NAME"
  elif [[ -d "$SOURCE_GRIMOIRE/$SPELL_NAME" ]]; then
    SPELL_DIR="$SOURCE_GRIMOIRE/$SPELL_NAME"
  fi
else
  for LAYER in $LAYERS; do
    [[ -d "$LAYER/$SPELL_NAME" ]] && FOUND_PATHS+=("$LAYER/$SPELL_NAME")
  done
  if [[ ${#FOUND_PATHS[@]} -eq 1 ]]; then
    SPELL_DIR="${FOUND_PATHS[1]}"
  elif [[ ${#FOUND_PATHS[@]} -gt 1 ]]; then
    echo "Spell '$SPELL_NAME' found in multiple locations:"
    for i in {1..${#FOUND_PATHS[@]}}; do echo "  [$i] ${FOUND_PATHS[$i]}"; done
    echo -n "Choose one (default 1): "
    read -r SELECT
    [[ -z "$SELECT" ]] && SELECT=1
    SPELL_DIR="${FOUND_PATHS[$SELECT]}"
  fi
fi

if [[ -z "$SPELL_DIR" || ! -d "$SPELL_DIR" ]]; then
  echo "Error: Spell '$SPELL_NAME' not found." >&2
  exit 1
fi

if [[ ! -f "$SPELL_DIR/SPELL" ]]; then
  echo "Error: SPELL metadata missing." >&2
  exit 1
fi

# Determine version
SPELL_VERSION=$(grep SPELL_VERSION "$SPELL_DIR/SPELL" | cut -d'"' -f2)
[[ -z "$SPELL_VERSION" ]] && SPELL_VERSION="unknown"

INSTALL_MANIFEST="var/installed/$SPELL_NAME-$SPELL_VERSION.manifest"

# Backup if another version is already installed
for OLD_MANIFEST in var/installed/$SPELL_NAME-*.manifest; do
  [[ -f "$OLD_MANIFEST" ]] || continue
  echo "Backup: preserving installed version ${OLD_MANIFEST##*-}"
  mv "$OLD_MANIFEST" "$OLD_MANIFEST.bak"
done

# Update tracking files
sed -i.bak "/^$SPELL_NAME=/d" "$DEFAULTS_FILE"
echo "$SPELL_NAME=$SPELL_DIR" >> "$DEFAULTS_FILE"

grep -q "^$SPELL_NAME:" "$VERSIONS_FILE" || echo "$SPELL_NAME:" >> "$VERSIONS_FILE"
grep -q "$SPELL_VERSION" <<<"$(grep ^$SPELL_NAME: "$VERSIONS_FILE")" ||   sed -i.bak "s|^$SPELL_NAME:.*|$SPELL_NAME: $(grep ^$SPELL_NAME: "$VERSIONS_FILE" | cut -d: -f2-),$SPELL_VERSION|" "$VERSIONS_FILE"

# Install
echo "Casting $SPELL_NAME version $SPELL_VERSION from $SPELL_DIR"
cd "$SPELL_DIR" || exit 1
zsh ./build
find /usr -newermt "$(date -d '5 minutes ago' '+%Y-%m-%d %H:%M:%S')" > "$INSTALL_MANIFEST"
# final success message
echo "âœ… Spell '$SPELL_NAME' successfully cast!"
