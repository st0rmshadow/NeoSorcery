#!/usr/bin/env zsh
# will eventually add lines to only happen when debugging right now always on
set -x 
# ─────────────────────────────────────────────────────────────
# If no subcommand is given, print a little help/usage and exit
if [[ $# -eq 0 ]]; then
  cat <<EOF
Usage: cast <spell>

Run “cast spell to install a spell from grimoire."
EOF
  exit 0
fi

# Require root
if [[ "$EUID" -ne 0 ]]; then
  echo "Error: This command must be run as root or with sudo." >&2
  exit 1
fi



# Resolve grimoire paths
if [[ "$1" == "-h" || "$1" == "--help" || "$1" == "help" ]]; then
  echo "Usage: cast <spell>
Options:
  -h, --help     Show this help message and exit

Description:
  Installs a spell by name. Looks first in ~/.sorcery/grimoire then in /etc/neosorcery/grimoire."
  exit 0
fi

if [[ -d "$HOME/.sorcery/grimoire" ]]; then
  GRIMOIRE_PATH_USER="$HOME/.sorcery/grimoire"
else
  GRIMOIRE_PATH_USER=""
fi
GRIMOIRE_PATH_GLOBAL="/etc/neosorcery/grimoire"

[[ -f /etc/sorcery.conf ]] && source /etc/sorcery.conf
[[ -f "$HOME/.sorcery/sorcery.local.conf" ]] && source "$HOME/.sorcery/sorcery.local.conf"

SPELL_NAME="$1"
if [[ -z "$SPELL_NAME" ]]; then
  echo "Error: No spell name provided." >&2
  exit 1
fi

# --- new existence check: ---
# make sure the spell actually lives in one of the grimoire dirs
if [[ -n "$GRIMOIRE_PATH_USER" && -e "$GRIMOIRE_PATH_USER/$SPELL_NAME" ]]; then
  :  # found in user grimoire
elif [[ -e "$GRIMOIRE_PATH_GLOBAL/$SPELL_NAME" ]]; then
  :  # found in global grimoire
else
  echo "Error: Spell '$SPELL_NAME' not found in grimoire." >&2
  exit 1
fi
# ----------------------------

if command -v screen >/dev/null; then
  screen -dmS cast_$SPELL_NAME zsh -c "cast_internal $SPELL_NAME"
else
  cast_internal "$SPELL_NAME"
fi
